sequenceDiagram
    actor User
    participant Widgets as Databricks Widgets
    participant Main as Main Function
    participant SparkInit as Spark Initializer
    participant DataChecker as Data Processor Checker
    participant FileSystem as dbutils.fs
    participant DeltaTableAPI as Delta Table API
    participant Tables as Database Tables
    participant TableProcessor as Table Processor
    participant ControlLogger as Control Logger
    
    User->>Widgets: Set force_update parameter
    Note over Widgets: Configure whether to force table updates
    
    User->>Main: main()
    Main->>SparkInit: initialize_spark()
    SparkInit-->>Main: Return SparkSession
    
    Main->>DataChecker: check_new_data_processed()
    
    DataChecker->>Tables: Query processing_metadata table
    Tables-->>DataChecker: Return latest processing record
    
    alt processing_metadata table not available
        DataChecker->>FileSystem: Check processing status file
        FileSystem-->>DataChecker: Return status file content
    end
    
    alt Status file not available
        DataChecker->>DataChecker: Try to get previous notebook result
    end
    
    DataChecker-->>Main: Return processing status
    
    alt No new data and not force_update
        Main-->>User: Skip processing and exit
    else New data or force_update
        Main->>Main: register_and_upsert_all_tables()
        
        Main->>Tables: Create control table if not exists
        
        Main->>FileSystem: Debug - list gold path contents
        FileSystem-->>Main: Return top files
        
        Main->>FileSystem: Debug - count silver batch dirs
        FileSystem-->>Main: Return silver batch count
        
        Main->>FileSystem: Debug - count checkpoint files
        FileSystem-->>Main: Return checkpoint count
        
        loop For each configured table (12 tables)
            Main->>FileSystem: Check if Delta path exists
            FileSystem-->>Main: Path exists status
            
            alt Path exists
                Main->>DeltaTableAPI: Check if valid Delta table
                DeltaTableAPI-->>Main: Delta table validity
                
                alt Valid Delta table
                    Main->>TableProcessor: register_and_upsert_table()
                    
                    TableProcessor->>DeltaTableAPI: Read source Delta table
                    DeltaTableAPI-->>TableProcessor: Return source DataFrame
                    
                    TableProcessor->>TableProcessor: Count source records
                    
                    alt Source has data
                        TableProcessor->>Tables: Check if table exists
                        Tables-->>TableProcessor: Table existence status
                        
                        alt Table doesn't exist
                            TableProcessor->>Tables: Create new table
                            TableProcessor->>Tables: Configure table properties
                            Tables-->>TableProcessor: Table created confirmation
                        else Table exists and is individual table
                            TableProcessor->>Tables: Read existing table
                            Tables-->>TableProcessor: Return target count
                            
                            TableProcessor->>TableProcessor: Compare source vs target count
                            Note over TableProcessor: Warn if source has fewer records
                            
                            TableProcessor->>Tables: Replace table data completely
                            Tables-->>TableProcessor: Replacement confirmation
                        else Table exists and is regular table
                            TableProcessor->>DeltaTableAPI: Get target Delta table
                            DeltaTableAPI-->>TableProcessor: Return target table
                            
                            TableProcessor->>Tables: Count target rows before merge
                            Tables-->>TableProcessor: Return row count
                            
                            TableProcessor->>DeltaTableAPI: Perform merge operation
                            Note over DeltaTableAPI: Match on publication_number
                            Note over DeltaTableAPI: Update matched records
                            Note over DeltaTableAPI: Insert new records
                            DeltaTableAPI-->>TableProcessor: Merge complete confirmation
                            
                            TableProcessor->>Tables: Count target rows after merge
                            Tables-->>TableProcessor: Return updated row count
                        end
                    end
                    
                    TableProcessor-->>Main: Return operation result
                end
            end
        end
        
        Main->>ControlLogger: Log update batch in control table
        ControlLogger-->>Main: Update logged confirmation
        
        Main->>Main: Calculate summary statistics
        Main->>Main: Print processing summary
        
        Main-->>User: Return final results as JSON
    end