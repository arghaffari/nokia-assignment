sequenceDiagram
    participant User
    participant Notebook as Registration Notebook
    participant MainProcessor as Main Function
    participant StatusChecker as Status Checker
    participant Processor as Table Processor
    participant DeltaTables as Gold Delta Files
    participant SQLTables as SQL Database Tables
    participant ControlTable as Control Table

    User->>Notebook: Execute notebook
    activate Notebook
    
    Notebook->>Notebook: Check schema drop setting
    
    alt drop_patent_data_schema is true
        Notebook->>SQLTables: DROP SCHEMA patent_data CASCADE
    end
    
    Notebook->>MainProcessor: Call main()
    activate MainProcessor
    
    MainProcessor->>MainProcessor: Check force_update setting
    MainProcessor->>StatusChecker: check_new_data_processed()
    activate StatusChecker
    
    StatusChecker->>SQLTables: Query processing_metadata table
    alt Metadata table exists
        SQLTables-->>StatusChecker: Return latest record
        StatusChecker->>StatusChecker: Extract new_data_processed
    else Fallback method
        StatusChecker->>DeltaTables: Check processing status file
        alt Status file exists
            DeltaTables-->>StatusChecker: Return status
        else Try notebook result
            StatusChecker->>StatusChecker: Get parent notebook result
            alt Result available
                StatusChecker->>StatusChecker: Extract new_data_processed
            else Assume new data
                StatusChecker->>StatusChecker: Default to true
            end
        end
    end
    
    StatusChecker-->>MainProcessor: Return processing status
    deactivate StatusChecker
    
    alt new_data_processed OR force_update
        MainProcessor->>Processor: register_and_upsert_all_tables()
        activate Processor
        
        Processor->>SQLTables: Create control table if not exists
        
        loop For each gold table
            Processor->>DeltaTables: Check if path exists
            DeltaTables-->>Processor: Path status
            
            alt Path exists and is valid Delta
                Processor->>DeltaTables: Read Delta table
                DeltaTables-->>Processor: Return DataFrame
                Processor->>Processor: Count source records
                
                alt Table doesn't exist in database
                    Processor->>SQLTables: Create new table
                    Processor->>SQLTables: Set table properties
                else Table exists and is individual table
                    Processor->>SQLTables: Read existing table
                    SQLTables-->>Processor: Return existing count
                    Processor->>SQLTables: Replace with new data
                else Table exists and has publication_number
                    Processor->>SQLTables: Get DeltaTable reference
                    SQLTables-->>Processor: Return DeltaTable
                    Processor->>SQLTables: Count before merge
                    Processor->>SQLTables: Perform merge operation
                    Processor->>SQLTables: Count after merge
                end
            else Path doesn't exist or invalid
                Processor->>Processor: Skip table
            end
        end
        
        Processor->>ControlTable: Log update with UUID
        Processor-->>MainProcessor: Return results for all tables
        deactivate Processor
        
        MainProcessor->>MainProcessor: Calculate summary statistics
        MainProcessor->>Notebook: Return final results
    else No new data and not forcing update
        MainProcessor->>Notebook: Skip processing and return
    end
    
    deactivate MainProcessor
    Notebook->>User: Display processing summary
    deactivate Notebook